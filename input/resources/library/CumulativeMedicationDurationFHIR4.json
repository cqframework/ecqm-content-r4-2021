{
  "resourceType": "Library",
  "id": "CumulativeMedicationDurationFHIR4",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2021-06-25T16:28:27.000-04:00",
    "source": "#WvkAD2m8mJWhJlcs",
    "profile": [ "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/computable-library-cqfm" ]
  },
  "language": "en",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://ecqi.healthit.gov/ecqms/Library/CumulativeMedicationDurationFHIR4",
  "version": "1.0.000",
  "name": "CumulativeMedicationDurationFHIR4",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "date": "2021-06-25T20:28:26+00:00",
  "publisher": "ESAC, Inc.",
  "description": "This library provides guidance for calculating Cumulative Medication Duration\nusing FHIR R4.",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}