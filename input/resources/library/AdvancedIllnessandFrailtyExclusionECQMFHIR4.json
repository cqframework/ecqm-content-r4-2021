{
  "resourceType": "Library",
  "id": "AdvancedIllnessandFrailtyExclusionECQMFHIR4",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2021-07-01T12:32:57.000-06:00",
    "source": "#lFh1NBD3JeX5ETtb",
    "profile": [ "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/computable-library-cqfm" ]
  },
  "language": "en",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://ecqi.healthit.gov/ecqms/Library/AdvancedIllnessandFrailtyExclusionECQMFHIR4",
  "version": "5.17.000",
  "name": "AdvancedIllnessandFrailtyExclusionECQMFHIR4",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "date": "2021-07-01T18:32:56+00:00",
  "publisher": "National Committee for Quality Assurance",
  "description": "Frailty Exclusion",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}